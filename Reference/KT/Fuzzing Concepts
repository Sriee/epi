Advanced Fuzzing Concepts
----------------------------------------------

Engine - Engine is written in C#. It is a processes which will be called by controller.
There are 3 serivices written in python which control the flow of execution of an iteration. They are
	1. Controller
	2. Publisher and 
	3. Agent

Controller is the orchestrator for each iterations. It spawns the child process, performs the iteration
and kills the processes. 

Control Iterations and Non-Control Iterations
----------------------------------------------
Very first iteration will be control iteration. In control iteration the control sends valid input to the DUT. 

Why to use control iteration in the start?
By doing so, we can be sure that the DUT is in valid state. If we receive any exception during the control iteration
phase, we wont proceed executing other iterations. The test will be stopped by the controller. 

Non-control iterations is where the fuzzed data will be sent to the DUT. If there is an exception or failure, the exception
will be reported and further iterations will be continued.  

Monitors
---------

Monitors are used to watch the service execution, whether the service has crashed for a particular malformed input. 
Once the monitor has detected a fault, it will go back iterations to see whether it could re-produce the fault. 
The number of iterations it will go back is hard coded in the code. The reason for going back iteration is to know, whether
a series of states has caused the exception. 

When the fault is able to be re-produce it will be declared as fault in the cyber-flood. If the fault is not able to
reproduce it will be marked as `warning` in cyber flood. 

Types of monitors
-----------------
1. Remote Command
2. Ping monitor
3. Listen monitor
4. Protocol Instrumentation monitor

Overview of how the monitor checks for the service
---------------------------------------------------
1. We use `service [service_name] status` to know the status of the service. [START, STOPPED, FAILED, WAITING]
2. Use a pattern for searching one of the strings 
3. If the pattern is found, then we declare the service has failed. 

Monitor and its functionalities
--------------------------------

1. Remote Command monitor - Run a command in the dut. Ex: service squid3 status
2. Ping Monitor - Routinely ping the routine to see whether it is up or not
3. Listen monitor - Endpoint keeps listening for the inputs from Dut
4. Protocol Instrumentation Monitor:
	- Protocol Instrumentation Monitor is recently added feature.
	- Due to the nature of non-control iterations, the DUT could have ended up in invalid state in the middle, we 
	  may not have caught the exception. PIM introduces control iteration between non-controlled iterations such we can
	  now catch the DUT in any invalid state. 

Restarters
-----------

Restarters are used to restart the service, once it is crashed. How do we know it is crashed ? Using the monitors

What happens if the monitor has detected fault and there is no restarter ? 
The monitor will declare the fault as `error`. If the restarter is not present, the controller will execute other
iterations. Since the restarter has not restarted the service, future iterations may also end up as faults.  

Types of restarters
--------------------
1. ESXi API
2. OpenStack API
3. Remote API
4. Remote Command (Most often used)

Remond Command Restarter
-------------------------
In remote command restarter, the user specifies a command to restart the service. Ex: `service squid3 start`
If the monitor has detected that `squid3` has gone down, then the above command is used to restart the service

Other Restarters
-----------------
The same concept as remote command restarter but here API's will be used to restart. The restarted entity would be
an ESXi host, Open Stack host machine etc. 

To setup trace mode for debugging
----------------------------------
1. The default mode that is used for printing the log messages is 'debug'. To know more debug information about the engine 
   'Trace' mode should be enabled
2. Go to '/opt/ghost/engine/ghost.log.config' and edit [minLevel = 'Trace']


#TODO

